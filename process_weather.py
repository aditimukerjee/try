import pandas as pd
import json


def combine_all_zips(data) -> pd.DataFrame:
    """
    Returns combined zip codes data

    Parameters:
        - data: JSON dump with all zip codes and data 
    Returns:
        - returns: pandas dataframe with all zip codes data
    """    
    final_df = pd.DataFrame()
    for zip_code in data.keys():
        df = data[zip_code]
        df['year_month'] = df['time'].dt.year.astype(str) + '_' + df['time'].dt.month.astype(str)
        df['zipCode'] = zip_code
        final_df = final_df.append(df)
    return final_df


def agg_data(full_weather_dict: dict, year: str, endpoint: str, data_path: str) -> pd.DataFrame:
    """
    Calculates aggregate data for every month in a year 
    and writes to a csv file.

    Parameters:
        - full_weather_dict: Pickle file generated by fetch_weather_data.py
        - year: The year where you want to aggreate the data each month
        - endpoint: On which data you want to aggregate(weather, solar, bio)
        - data_path: Location where the csv file will be saved
    Returns:
        - returns: Aggregated data for a year on each month
    """    
    all_zips = combine_all_zips(full_weather_dict)
    agg = ['mean', 'min', 'max' ,'sum']
    # grouping and aggregating
    if endpoint == 'weather':
        result = all_zips.groupby(['year_month','zipCode']).agg(
            {'airTemperature': aggregrate,
            'cloudCover': aggregrate,
            'humidity': aggregrate,
            'precipitation': aggregrate,
            'pressure':aggregrate,
            'snowDepth': aggregrate,
            'windSpeed': aggregrate
            })
    elif endpoint == 'solar':
        result = all_zips.groupby(['year_month','zipCode']).agg(
            {'uvIndex': aggregrate,
            'downwardShortWaveRadiationFlux': aggregrate
            })

    elif endpoint == 'bio':
        result = all_zips.groupby(['year_month','zipCode']).agg(
            {'soilMoisture': aggregrate,
            'soilMoisture10cm': aggregrate,
            'soilMoisture40cm': aggregrate,
            'soilMoisture100cm': aggregrate,            
            'soilTemperature': aggregrate,
            'soilTemperature10cm': aggregrate,
            'soilTemperature40cm': aggregrate,
            'soilTemperature100cm': aggregrate
            })        
    ## Reset min, max in col names
    result.columns = ["_".join(x) for x in result.columns.ravel()]
    #joining the column with year, month, feature and aggregation
    result = result.reset_index()
    ## Keep only months for this year
    all_months = result['year_month'].unique().tolist()
    keep_months = []
    for month in all_months:
        if month.split('_')[0] == str(year):
            keep_months.append(month)
    result = result[result['year_month'].isin(keep_months)]
    file_name = f'{data_path}/{year}/aggregate_data_{year}_{endpoint}.csv'
    result.to_csv(file_name, sep ='\t')
    return result